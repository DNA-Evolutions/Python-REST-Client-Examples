# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)

    The version of the OpenAPI document: 1.2.6-SNAPSHOT
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from touroptimizer_py_client.models.resource import Resource

class TestResource(unittest.TestCase):
    """Resource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Resource:
        """Test Resource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Resource`
        """
        model = Resource()
        if include_optional:
            return Resource(
                id = 'MyResouce',
                extra_info = 'My custom extra info',
                location_id = 'MySecondResource',
                constraint_alias_id = 'Jane',
                type = touroptimizer_py_client.models.resource_type.ResourceType(
                    type_name = '', ),
                position = touroptimizer_py_client.models.position.Position(
                    latitude = 48.384037, 
                    longitude = 10.005226, 
                    location_id = 'MyLocationId', 
                    geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                        location_id = 'MyLocationId', 
                        housenumber = '5', 
                        streetname = 'Marlene-Dietrich-Strasse', 
                        city = 'Neu-Ulm', 
                        county = '', 
                        state = '', 
                        statecode = '', 
                        country = 'Germany', 
                        macrocountry = 'Berlin', 
                        countrycode = 'DE', 
                        postalcode = '89231', 
                        layer = '', 
                        source = '', 
                        accuracy = '', 
                        confidence = 1.0, 
                        label = '', ), 
                    location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                        layers = 'address', 
                        size = 1, 
                        radius = 20, 
                        sources = 'all', ), ),
                working_hours = [
                    touroptimizer_py_client.models.working_hours.WorkingHours(
                        begin = '2020-03-06T07:00Z', 
                        end = '2020-03-06T17:00Z', 
                        zone_id = 'UTC', 
                        max_time = 'PT480M', 
                        max_distance = '800.0 km', 
                        stay_out_cycle_definition = touroptimizer_py_client.models.stay_out_cycle_definition.StayOutCycleDefinition(
                            cycle_lenght = 'PT7D', 
                            cycle_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        start_reduction_time_definition = touroptimizer_py_client.models.start_reduction_time_definition.StartReductionTimeDefinition(
                            max_route_start_reduction_time = 'PT30M', 
                            is_reduction_time_only_used_for_driving = True, ), 
                        start_reduction_time_pillar_definition = touroptimizer_py_client.models.start_reduction_time_pillar_definition.StartReductionTimePillarDefinition(
                            max_route_start_reduction_time_pillar = 'PT30M', 
                            is_reduction_time_only_used_for_driving_pillar = True, ), 
                        start_reduction_time_include_definition = touroptimizer_py_client.models.start_reduction_time_include_definition.StartReductionTimeIncludeDefinition(
                            is_reduction_time_included_in_working_time = True, ), 
                        local_flex_time = 'PT30M', 
                        local_post_flex_time = 'PT30M', 
                        local_post_flex_time_only_on_overtime = True, 
                        max_local_pillar_after_hours_time = 'PT30M', 
                        node_color_capacities = [
                            touroptimizer_py_client.models.node_color_capacity.NodeColorCapacity(
                                node_color = touroptimizer_py_client.models.node_color.NodeColor(
                                    color_code = 56, 
                                    color_id = '', 
                                    count_value = 56, ), 
                                max_usage = 1.337, )
                            ], 
                        working_hours_constraints = [
                            touroptimizer_py_client.models.constraint.Constraint(
                                type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                    type_name = '', ), 
                                is_hard = True, )
                            ], 
                        multi_working_hours_constraints = [
                            touroptimizer_py_client.models.constraint.Constraint(
                                type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                    type_name = '', ), 
                                is_hard = True, )
                            ], 
                        qualifications = [
                            touroptimizer_py_client.models.qualification.Qualification(
                                type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                    type_name = '', ), )
                            ], 
                        route_start_time_hook = 'PT30M', 
                        hook_element_connections = [
                            touroptimizer_py_client.models.reduced_node_edge_connector_item.ReducedNodeEdgeConnectorItem(
                                distance = '100.0 km', 
                                time = 'PT30M', 
                                from_element_id = 'MyStartElementId', 
                                to_element_id = 'MyToElementId', )
                            ], 
                        is_available_for_stay = True, 
                        is_closed_route = True, )
                    ],
                max_time = 'PT8H',
                max_distance = '100.0 km',
                destination_position = touroptimizer_py_client.models.position.Position(
                    latitude = 48.384037, 
                    longitude = 10.005226, 
                    location_id = 'MyLocationId', 
                    geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                        location_id = 'MyLocationId', 
                        housenumber = '5', 
                        streetname = 'Marlene-Dietrich-Strasse', 
                        city = 'Neu-Ulm', 
                        county = '', 
                        state = '', 
                        statecode = '', 
                        country = 'Germany', 
                        macrocountry = 'Berlin', 
                        countrycode = 'DE', 
                        postalcode = '89231', 
                        layer = '', 
                        source = '', 
                        accuracy = '', 
                        confidence = 1.0, 
                        label = '', ), 
                    location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                        layers = 'address', 
                        size = 1, 
                        radius = 20, 
                        sources = 'all', ), ),
                stay_out_definition = touroptimizer_py_client.models.stay_out_definition.StayOutDefinition(
                    max_total_stays_out = 56, 
                    max_stays_out_in_row = 56, 
                    min_recovery = 'PT1D', ),
                stay_out_cycle_definition = touroptimizer_py_client.models.stay_out_cycle_definition.StayOutCycleDefinition(
                    cycle_lenght = 'PT7D', 
                    cycle_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                stay_out_policy_time = 'PT1H',
                stay_out_policy_distance = '100.0 km',
                capacity = [
                    1.337
                    ],
                initial_load = [
                    1.337
                    ],
                min_degrated_capacity = [
                    1.337
                    ],
                capacity_deg_per_stop = [
                    1.337
                    ],
                start_reduction_time_definition = touroptimizer_py_client.models.start_reduction_time_definition.StartReductionTimeDefinition(
                    max_route_start_reduction_time = 'PT30M', 
                    is_reduction_time_only_used_for_driving = True, ),
                start_reduction_time_pillar_definition = touroptimizer_py_client.models.start_reduction_time_pillar_definition.StartReductionTimePillarDefinition(
                    max_route_start_reduction_time_pillar = 'PT30M', 
                    is_reduction_time_only_used_for_driving_pillar = True, ),
                start_reduction_time_include_definition = touroptimizer_py_client.models.start_reduction_time_include_definition.StartReductionTimeIncludeDefinition(
                    is_reduction_time_included_in_working_time = True, ),
                flex_time = 'PT1H',
                post_flex_time = 'PT1H',
                post_flex_time_only_on_overtime = True,
                max_pillar_after_hours_time = 'PT1H',
                max_drive_time_first_node = 'PT1H',
                max_drive_distance_first_node = '100.0 km',
                max_drive_time_last_node = 'PT1H',
                max_drive_distance_last_node = '100.0 km',
                kilometer_cost = 1.337,
                hour_cost = 1.337,
                production_hour_cost = 1.337,
                fix_cost = 1.337,
                pre_work_driving_time = 'PT1H',
                skill_efficiency_factor = 1.337,
                acceptable_overtime = 'PT1H',
                strict_overtime = 'PT2H',
                acceptable_overdistance = '100.0 km',
                strict_overdistance = '100.0 km',
                average_speed = 1.337,
                qualifications = [
                    touroptimizer_py_client.models.qualification.Qualification(
                        type = touroptimizer_py_client.models.qualification_type.QualificationType(
                            type_name = '', ), )
                    ],
                constraints = [
                    touroptimizer_py_client.models.constraint.Constraint(
                        type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                            type_name = '', ), 
                        is_hard = True, )
                    ],
                connection_time_efficiency_factor = 1.5,
                co2emission_factor = 0.377,
                resource_depot = touroptimizer_py_client.models.i_resource_depot.IResourceDepot(
                    items = [
                        touroptimizer_py_client.models.i_load_capacity.ILoadCapacity(
                            load_pickup_time = 56, 
                            current_load = 1.337, 
                            maximal_individual_load_capacity = 1.337, 
                            id = '', 
                            type_name = '', )
                        ], 
                    depot_id = '', 
                    maximal_total_capacity = 1.337, 
                    capacity_unit_map = {
                        'key' : 1.337
                        }, 
                    type_name = '', ),
                overall_visit_duration_efficiency = 1.5,
                is_reduction_time_included_in_total_working_time = True,
                is_reduction_time_only_used_for_driving = True
            )
        else:
            return Resource(
                id = 'MyResouce',
                type = touroptimizer_py_client.models.resource_type.ResourceType(
                    type_name = '', ),
                position = touroptimizer_py_client.models.position.Position(
                    latitude = 48.384037, 
                    longitude = 10.005226, 
                    location_id = 'MyLocationId', 
                    geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                        location_id = 'MyLocationId', 
                        housenumber = '5', 
                        streetname = 'Marlene-Dietrich-Strasse', 
                        city = 'Neu-Ulm', 
                        county = '', 
                        state = '', 
                        statecode = '', 
                        country = 'Germany', 
                        macrocountry = 'Berlin', 
                        countrycode = 'DE', 
                        postalcode = '89231', 
                        layer = '', 
                        source = '', 
                        accuracy = '', 
                        confidence = 1.0, 
                        label = '', ), 
                    location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                        layers = 'address', 
                        size = 1, 
                        radius = 20, 
                        sources = 'all', ), ),
                working_hours = [
                    touroptimizer_py_client.models.working_hours.WorkingHours(
                        begin = '2020-03-06T07:00Z', 
                        end = '2020-03-06T17:00Z', 
                        zone_id = 'UTC', 
                        max_time = 'PT480M', 
                        max_distance = '800.0 km', 
                        stay_out_cycle_definition = touroptimizer_py_client.models.stay_out_cycle_definition.StayOutCycleDefinition(
                            cycle_lenght = 'PT7D', 
                            cycle_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        start_reduction_time_definition = touroptimizer_py_client.models.start_reduction_time_definition.StartReductionTimeDefinition(
                            max_route_start_reduction_time = 'PT30M', 
                            is_reduction_time_only_used_for_driving = True, ), 
                        start_reduction_time_pillar_definition = touroptimizer_py_client.models.start_reduction_time_pillar_definition.StartReductionTimePillarDefinition(
                            max_route_start_reduction_time_pillar = 'PT30M', 
                            is_reduction_time_only_used_for_driving_pillar = True, ), 
                        start_reduction_time_include_definition = touroptimizer_py_client.models.start_reduction_time_include_definition.StartReductionTimeIncludeDefinition(
                            is_reduction_time_included_in_working_time = True, ), 
                        local_flex_time = 'PT30M', 
                        local_post_flex_time = 'PT30M', 
                        local_post_flex_time_only_on_overtime = True, 
                        max_local_pillar_after_hours_time = 'PT30M', 
                        node_color_capacities = [
                            touroptimizer_py_client.models.node_color_capacity.NodeColorCapacity(
                                node_color = touroptimizer_py_client.models.node_color.NodeColor(
                                    color_code = 56, 
                                    color_id = '', 
                                    count_value = 56, ), 
                                max_usage = 1.337, )
                            ], 
                        working_hours_constraints = [
                            touroptimizer_py_client.models.constraint.Constraint(
                                type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                    type_name = '', ), 
                                is_hard = True, )
                            ], 
                        multi_working_hours_constraints = [
                            touroptimizer_py_client.models.constraint.Constraint(
                                type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                    type_name = '', ), 
                                is_hard = True, )
                            ], 
                        qualifications = [
                            touroptimizer_py_client.models.qualification.Qualification(
                                type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                    type_name = '', ), )
                            ], 
                        route_start_time_hook = 'PT30M', 
                        hook_element_connections = [
                            touroptimizer_py_client.models.reduced_node_edge_connector_item.ReducedNodeEdgeConnectorItem(
                                distance = '100.0 km', 
                                time = 'PT30M', 
                                from_element_id = 'MyStartElementId', 
                                to_element_id = 'MyToElementId', )
                            ], 
                        is_available_for_stay = True, 
                        is_closed_route = True, )
                    ],
                max_time = 'PT8H',
                max_distance = '100.0 km',
        )
        """

    def testResource(self):
        """Test Resource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
