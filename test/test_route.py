# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)

    The version of the OpenAPI document: 1.2.6-SNAPSHOT
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from touroptimizer_py_client.models.route import Route

class TestRoute(unittest.TestCase):
    """Route unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Route:
        """Test Route
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Route`
        """
        model = Route()
        if include_optional:
            return Route(
                header = touroptimizer_py_client.models.route_header.RouteHeader(
                    cost = 2468.32, 
                    time = 'PT30M', 
                    idle_time = 'PT30M', 
                    prod_time = 'PT30M', 
                    tran_time = 'PT310M', 
                    termi_time = 'PT800M', 
                    distance = '800.0 km', 
                    termi_distance = '53.0 km', 
                    route_violations = [
                        touroptimizer_py_client.models.violation.Violation(
                            value = '507.98525', 
                            desc = 'Late time [min]: 507.98525', 
                            category = 'CONSTRAINTVIOLATION', 
                            attribute = 'TIMECONSTRAINT', 
                            sub_attribute = 'LATE', 
                            code = 5, )
                        ], 
                    is_closed = True, 
                    is_alternate_destination = True, ),
                id = 11,
                resource_id = 'Laura',
                route_trip = touroptimizer_py_client.models.route_trip.RouteTrip(
                    trips = [
                        touroptimizer_py_client.models.resource_trip.ResourceTrip(
                            line = touroptimizer_py_client.models.encoded_polyline.EncodedPolyline(
                                encoded_polyline = '', 
                                precision = 1.337, ), 
                            from_element_id = '', 
                            to_element_id = '', 
                            raw_json = touroptimizer_py_client.models.raw_json.rawJson(), )
                        ], ),
                start_time = '2020-03-06T07:00Z',
                start_element_id = 'Laura',
                start_position = touroptimizer_py_client.models.position.Position(
                    latitude = 48.384037, 
                    longitude = 10.005226, 
                    location_id = 'MyLocationId', 
                    geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                        location_id = 'MyLocationId', 
                        housenumber = '5', 
                        streetname = 'Marlene-Dietrich-Strasse', 
                        city = 'Neu-Ulm', 
                        county = '', 
                        state = '', 
                        statecode = '', 
                        country = 'Germany', 
                        macrocountry = 'Berlin', 
                        countrycode = 'DE', 
                        postalcode = '89231', 
                        layer = '', 
                        source = '', 
                        accuracy = '', 
                        confidence = 1.0, 
                        label = '', ), 
                    location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                        layers = 'address', 
                        size = 1, 
                        radius = 20, 
                        sources = 'all', ), ),
                end_element_id = 'Laura',
                end_position = touroptimizer_py_client.models.position.Position(
                    latitude = 48.384037, 
                    longitude = 10.005226, 
                    location_id = 'MyLocationId', 
                    geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                        location_id = 'MyLocationId', 
                        housenumber = '5', 
                        streetname = 'Marlene-Dietrich-Strasse', 
                        city = 'Neu-Ulm', 
                        county = '', 
                        state = '', 
                        statecode = '', 
                        country = 'Germany', 
                        macrocountry = 'Berlin', 
                        countrycode = 'DE', 
                        postalcode = '89231', 
                        layer = '', 
                        source = '', 
                        accuracy = '', 
                        confidence = 1.0, 
                        label = '', ), 
                    location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                        layers = 'address', 
                        size = 1, 
                        radius = 20, 
                        sources = 'all', ), ),
                optimizable_element_ids = [
                    ''
                    ],
                non_optimizable_element_ids = [
                    ''
                    ],
                optional_optimizable_element_ids = [
                    ''
                    ],
                pillar_element_ids = [
                    ''
                    ],
                element_details = [
                    touroptimizer_py_client.models.route_element_detail.RouteElementDetail(
                        element_id = 'Customer-A', 
                        start_time = '2020-03-06T08:00Z', 
                        arrival_time = '2020-03-06T07:00Z', 
                        departure_time = '2020-03-06T10:00Z', 
                        transition_time = 'PT23M', 
                        effective_position = touroptimizer_py_client.models.position.Position(
                            latitude = 48.384037, 
                            longitude = 10.005226, 
                            location_id = 'MyLocationId', 
                            geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                                location_id = 'MyLocationId', 
                                housenumber = '5', 
                                streetname = 'Marlene-Dietrich-Strasse', 
                                city = 'Neu-Ulm', 
                                county = '', 
                                state = '', 
                                statecode = '', 
                                country = 'Germany', 
                                macrocountry = 'Berlin', 
                                countrycode = 'DE', 
                                postalcode = '89231', 
                                layer = '', 
                                source = '', 
                                accuracy = '', 
                                confidence = 1.0, 
                                label = '', ), 
                            location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                                layers = 'address', 
                                size = 1, 
                                radius = 20, 
                                sources = 'all', ), ), 
                        idle_time = 'PT60M', 
                        zone_id = 'UTC', 
                        white_space_idle_time = 'PT26M', 
                        duration_time = 'PT120M', 
                        transition_distance = '100.0 km', 
                        choosen_working_hours_index = 1, 
                        early_deviation = 'PT30M', 
                        late_deviation = 'PT-30M', 
                        schedule_status = 'INTIME', 
                        visitor_id = 'Laura', 
                        load_change = [
                            1.337
                            ], 
                        cur_capacity = [
                            1.337
                            ], 
                        before_visit_node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                            items = [
                                touroptimizer_py_client.models.i_load.ILoad(
                                    priority = 56, 
                                    load_value = 1.337, 
                                    fuzzy_visit = True, 
                                    request = True, 
                                    id = '', 
                                    type_name = '', )
                                ], 
                            depot_id = '', 
                            has_timed_loads = True, 
                            has_flex_load = True, 
                            type_name = '', ), 
                        after_visit_node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                            depot_id = '', 
                            has_timed_loads = True, 
                            has_flex_load = True, 
                            type_name = '', ), 
                        node_violations = [
                            touroptimizer_py_client.models.violation.Violation(
                                value = '507.98525', 
                                desc = 'Late time [min]: 507.98525', 
                                category = 'CONSTRAINTVIOLATION', 
                                attribute = 'TIMECONSTRAINT', 
                                sub_attribute = 'LATE', 
                                code = 5, )
                            ], 
                        is_unlocated_idle_time = True, )
                    ],
                pillar_latest_effective_arrival_offset_map = {
                    'key' : 56
                    },
                flags = [
                    'FINALIZED_PILLARFORCEARRANGER'
                    ],
                additional_route_start_offset = 56,
                is_inactive = False,
                is_locked_down = False,
                is_finalized = False
            )
        else:
            return Route(
                id = 11,
                resource_id = 'Laura',
                start_time = '2020-03-06T07:00Z',
                start_element_id = 'Laura',
                end_element_id = 'Laura',
                optimizable_element_ids = [
                    ''
                    ],
                non_optimizable_element_ids = [
                    ''
                    ],
                optional_optimizable_element_ids = [
                    ''
                    ],
                pillar_element_ids = [
                    ''
                    ],
                element_details = [
                    touroptimizer_py_client.models.route_element_detail.RouteElementDetail(
                        element_id = 'Customer-A', 
                        start_time = '2020-03-06T08:00Z', 
                        arrival_time = '2020-03-06T07:00Z', 
                        departure_time = '2020-03-06T10:00Z', 
                        transition_time = 'PT23M', 
                        effective_position = touroptimizer_py_client.models.position.Position(
                            latitude = 48.384037, 
                            longitude = 10.005226, 
                            location_id = 'MyLocationId', 
                            geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                                location_id = 'MyLocationId', 
                                housenumber = '5', 
                                streetname = 'Marlene-Dietrich-Strasse', 
                                city = 'Neu-Ulm', 
                                county = '', 
                                state = '', 
                                statecode = '', 
                                country = 'Germany', 
                                macrocountry = 'Berlin', 
                                countrycode = 'DE', 
                                postalcode = '89231', 
                                layer = '', 
                                source = '', 
                                accuracy = '', 
                                confidence = 1.0, 
                                label = '', ), 
                            location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                                layers = 'address', 
                                size = 1, 
                                radius = 20, 
                                sources = 'all', ), ), 
                        idle_time = 'PT60M', 
                        zone_id = 'UTC', 
                        white_space_idle_time = 'PT26M', 
                        duration_time = 'PT120M', 
                        transition_distance = '100.0 km', 
                        choosen_working_hours_index = 1, 
                        early_deviation = 'PT30M', 
                        late_deviation = 'PT-30M', 
                        schedule_status = 'INTIME', 
                        visitor_id = 'Laura', 
                        load_change = [
                            1.337
                            ], 
                        cur_capacity = [
                            1.337
                            ], 
                        before_visit_node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                            items = [
                                touroptimizer_py_client.models.i_load.ILoad(
                                    priority = 56, 
                                    load_value = 1.337, 
                                    fuzzy_visit = True, 
                                    request = True, 
                                    id = '', 
                                    type_name = '', )
                                ], 
                            depot_id = '', 
                            has_timed_loads = True, 
                            has_flex_load = True, 
                            type_name = '', ), 
                        after_visit_node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                            depot_id = '', 
                            has_timed_loads = True, 
                            has_flex_load = True, 
                            type_name = '', ), 
                        node_violations = [
                            touroptimizer_py_client.models.violation.Violation(
                                value = '507.98525', 
                                desc = 'Late time [min]: 507.98525', 
                                category = 'CONSTRAINTVIOLATION', 
                                attribute = 'TIMECONSTRAINT', 
                                sub_attribute = 'LATE', 
                                code = 5, )
                            ], 
                        is_unlocated_idle_time = True, )
                    ],
        )
        """

    def testRoute(self):
        """Test Route"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
