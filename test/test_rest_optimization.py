# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)

    The version of the OpenAPI document: 1.2.6-SNAPSHOT
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from touroptimizer_py_client.models.rest_optimization import RestOptimization

class TestRestOptimization(unittest.TestCase):
    """RestOptimization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RestOptimization:
        """Test RestOptimization
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RestOptimization`
        """
        model = RestOptimization()
        if include_optional:
            return RestOptimization(
                optimization_status = touroptimizer_py_client.models.optimization_status.OptimizationStatus(
                    status_description = '', 
                    error = '', 
                    status = 'UNKNOWN', ),
                id = '626ba175a9d4fa6d6beec158',
                created_time_stamp = 56,
                creator = '11aa65b13c2a6d34f8727e82e403ce869e3bba1d35c45c595e8cc5ce5e74e57a',
                ident = 'JOpt-Run-603886271000',
                nodes = [
                    touroptimizer_py_client.models.node.Node(
                        id = 'MySecondNode', 
                        extra_info = 'My custom extra info', 
                        location_id = 'MyFirstNode', 
                        constraint_alias_id = 'MyNode', 
                        type = touroptimizer_py_client.models.node_type.NodeType(
                            type_name = '', ), 
                        opening_hours = [
                            touroptimizer_py_client.models.opening_hours.OpeningHours(
                                begin = '2020-03-06T06:00Z', 
                                end = '2020-03-06T19:00Z', 
                                zone_id = 'UTC', 
                                service_hours_offsets = [
                                    touroptimizer_py_client.models.long_long_pair.LongLongPair(
                                        left = 56, 
                                        right = 56, )
                                    ], 
                                is_preffered = False, 
                                is_solo_access_hours = True, )
                            ], 
                        visit_duration = 'PT60M', 
                        constraints = [
                            touroptimizer_py_client.models.constraint.Constraint(
                                type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                    type_name = '', ), 
                                is_hard = True, )
                            ], 
                        offered_node = touroptimizer_py_client.models.offered_node.OfferedNode(
                            individual_multiplier = 1.337, ), 
                        load_dimension = touroptimizer_py_client.models.load_dimension.LoadDimension(
                            unload_all_dimension = 56, 
                            total_load_dimension = 56, 
                            unload_all = True, ), 
                        load = [
                            1.337
                            ], 
                        qualifications = [
                            touroptimizer_py_client.models.qualification.Qualification(
                                type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                    type_name = '', ), )
                            ], 
                        lockdown_time = 56, 
                        fix_cost = 1.337, 
                        priority = 56, 
                        priority_first = 56, 
                        priority_last = 56, 
                        node_color = touroptimizer_py_client.models.node_color.NodeColor(
                            color_code = 56, 
                            color_id = '', 
                            count_value = 56, ), 
                        min_auto_filter_protected_executions = 56, 
                        node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                            items = [
                                touroptimizer_py_client.models.i_load.ILoad(
                                    priority = 56, 
                                    load_value = 1.337, 
                                    fuzzy_visit = True, 
                                    request = True, 
                                    id = '', 
                                    type_name = '', )
                                ], 
                            depot_id = '', 
                            has_timed_loads = True, 
                            has_flex_load = True, 
                            type_name = '', ), 
                        route_dependent_visit_duration = True, 
                        allow_move_to_reduce_flex_time = True, 
                        min_visit_duration = 'PT10M', 
                        joint_visit_duration = 'PT60M', 
                        return_start_duration = '', 
                        is_optimizable = True, 
                        is_optional = True, 
                        is_unassigned = True, 
                        is_stay_node = True, 
                        is_work_node = True, 
                        is_wait_on_early_arrival = True, 
                        is_opening_hours_includes_duration = True, 
                        is_causing_idle_time_cost = True, 
                        is_wait_on_early_arrival_first_node = True, )
                    ],
                resources = [
                    touroptimizer_py_client.models.resource.Resource(
                        id = 'MyResouce', 
                        extra_info = 'My custom extra info', 
                        location_id = 'MySecondResource', 
                        constraint_alias_id = 'Jane', 
                        type = touroptimizer_py_client.models.resource_type.ResourceType(
                            type_name = '', ), 
                        position = touroptimizer_py_client.models.position.Position(
                            latitude = 48.384037, 
                            longitude = 10.005226, 
                            location_id = 'MyLocationId', 
                            geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                                location_id = 'MyLocationId', 
                                housenumber = '5', 
                                streetname = 'Marlene-Dietrich-Strasse', 
                                city = 'Neu-Ulm', 
                                county = '', 
                                state = '', 
                                statecode = '', 
                                country = 'Germany', 
                                macrocountry = 'Berlin', 
                                countrycode = 'DE', 
                                postalcode = '89231', 
                                layer = '', 
                                source = '', 
                                accuracy = '', 
                                confidence = 1.0, 
                                label = '', ), 
                            location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                                layers = 'address', 
                                size = 1, 
                                radius = 20, 
                                sources = 'all', ), ), 
                        working_hours = [
                            touroptimizer_py_client.models.working_hours.WorkingHours(
                                begin = '2020-03-06T07:00Z', 
                                end = '2020-03-06T17:00Z', 
                                zone_id = 'UTC', 
                                max_time = 'PT480M', 
                                max_distance = '800.0 km', 
                                stay_out_cycle_definition = touroptimizer_py_client.models.stay_out_cycle_definition.StayOutCycleDefinition(
                                    cycle_lenght = 'PT7D', 
                                    cycle_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                                start_reduction_time_definition = touroptimizer_py_client.models.start_reduction_time_definition.StartReductionTimeDefinition(
                                    max_route_start_reduction_time = 'PT30M', 
                                    is_reduction_time_only_used_for_driving = True, ), 
                                start_reduction_time_pillar_definition = touroptimizer_py_client.models.start_reduction_time_pillar_definition.StartReductionTimePillarDefinition(
                                    max_route_start_reduction_time_pillar = 'PT30M', 
                                    is_reduction_time_only_used_for_driving_pillar = True, ), 
                                start_reduction_time_include_definition = touroptimizer_py_client.models.start_reduction_time_include_definition.StartReductionTimeIncludeDefinition(
                                    is_reduction_time_included_in_working_time = True, ), 
                                local_flex_time = 'PT30M', 
                                local_post_flex_time = 'PT30M', 
                                local_post_flex_time_only_on_overtime = True, 
                                max_local_pillar_after_hours_time = 'PT30M', 
                                node_color_capacities = [
                                    touroptimizer_py_client.models.node_color_capacity.NodeColorCapacity(
                                        node_color = touroptimizer_py_client.models.node_color.NodeColor(
                                            color_code = 56, 
                                            color_id = '', 
                                            count_value = 56, ), 
                                        max_usage = 1.337, )
                                    ], 
                                working_hours_constraints = [
                                    touroptimizer_py_client.models.constraint.Constraint(
                                        type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                            type_name = '', ), 
                                        is_hard = True, )
                                    ], 
                                multi_working_hours_constraints = [
                                    touroptimizer_py_client.models.constraint.Constraint(
                                        type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                            type_name = '', ), 
                                        is_hard = True, )
                                    ], 
                                qualifications = [
                                    touroptimizer_py_client.models.qualification.Qualification(
                                        type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                            type_name = '', ), )
                                    ], 
                                route_start_time_hook = 'PT30M', 
                                hook_element_connections = [
                                    touroptimizer_py_client.models.reduced_node_edge_connector_item.ReducedNodeEdgeConnectorItem(
                                        distance = '100.0 km', 
                                        time = 'PT30M', 
                                        from_element_id = 'MyStartElementId', 
                                        to_element_id = 'MyToElementId', )
                                    ], 
                                is_available_for_stay = True, 
                                is_closed_route = True, )
                            ], 
                        max_time = 'PT8H', 
                        max_distance = '100.0 km', 
                        destination_position = touroptimizer_py_client.models.position.Position(
                            latitude = 48.384037, 
                            longitude = 10.005226, 
                            location_id = 'MyLocationId', ), 
                        stay_out_definition = touroptimizer_py_client.models.stay_out_definition.StayOutDefinition(
                            max_total_stays_out = 56, 
                            max_stays_out_in_row = 56, 
                            min_recovery = 'PT1D', ), 
                        stay_out_cycle_definition = touroptimizer_py_client.models.stay_out_cycle_definition.StayOutCycleDefinition(
                            cycle_lenght = 'PT7D', 
                            cycle_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        stay_out_policy_time = 'PT1H', 
                        stay_out_policy_distance = '100.0 km', 
                        capacity = [
                            1.337
                            ], 
                        initial_load = [
                            1.337
                            ], 
                        min_degrated_capacity = [
                            1.337
                            ], 
                        capacity_deg_per_stop = [
                            1.337
                            ], 
                        start_reduction_time_definition = touroptimizer_py_client.models.start_reduction_time_definition.StartReductionTimeDefinition(
                            max_route_start_reduction_time = 'PT30M', 
                            is_reduction_time_only_used_for_driving = True, ), 
                        start_reduction_time_pillar_definition = touroptimizer_py_client.models.start_reduction_time_pillar_definition.StartReductionTimePillarDefinition(
                            max_route_start_reduction_time_pillar = 'PT30M', 
                            is_reduction_time_only_used_for_driving_pillar = True, ), 
                        start_reduction_time_include_definition = touroptimizer_py_client.models.start_reduction_time_include_definition.StartReductionTimeIncludeDefinition(
                            is_reduction_time_included_in_working_time = True, ), 
                        flex_time = 'PT1H', 
                        post_flex_time = 'PT1H', 
                        post_flex_time_only_on_overtime = True, 
                        max_pillar_after_hours_time = 'PT1H', 
                        max_drive_time_first_node = 'PT1H', 
                        max_drive_distance_first_node = '100.0 km', 
                        max_drive_time_last_node = 'PT1H', 
                        max_drive_distance_last_node = '100.0 km', 
                        kilometer_cost = 1.337, 
                        hour_cost = 1.337, 
                        production_hour_cost = 1.337, 
                        fix_cost = 1.337, 
                        pre_work_driving_time = 'PT1H', 
                        skill_efficiency_factor = 1.337, 
                        acceptable_overtime = 'PT1H', 
                        strict_overtime = 'PT2H', 
                        acceptable_overdistance = '100.0 km', 
                        strict_overdistance = '100.0 km', 
                        average_speed = 1.337, 
                        qualifications = [
                            touroptimizer_py_client.models.qualification.Qualification(
                                type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                    type_name = '', ), )
                            ], 
                        constraints = [
                            
                            ], 
                        connection_time_efficiency_factor = 1.5, 
                        co2emission_factor = 0.377, 
                        resource_depot = touroptimizer_py_client.models.i_resource_depot.IResourceDepot(
                            items = [
                                touroptimizer_py_client.models.i_load_capacity.ILoadCapacity(
                                    load_pickup_time = 56, 
                                    current_load = 1.337, 
                                    maximal_individual_load_capacity = 1.337, 
                                    id = '', 
                                    type_name = '', )
                                ], 
                            depot_id = '', 
                            maximal_total_capacity = 1.337, 
                            capacity_unit_map = {
                                'key' : 1.337
                                }, 
                            type_name = '', ), 
                        overall_visit_duration_efficiency = 1.5, 
                        is_reduction_time_included_in_total_working_time = True, 
                        is_reduction_time_only_used_for_driving = True, )
                    ],
                node_relations = [
                    touroptimizer_py_client.models.node_relation.NodeRelation(
                        master_node_id = '', 
                        related_node_ids = [
                            ''
                            ], 
                        type = touroptimizer_py_client.models.node_relation_type.NodeRelationType(
                            type_name = '', ), 
                        relation_mode = 'STRONG', )
                    ],
                element_connections = [
                    touroptimizer_py_client.models.element_connection.ElementConnection(
                        from_element_id = 'MyStartElementId', 
                        to_element_id = 'MyToElementId', 
                        type = touroptimizer_py_client.models.element_connection_type.ElementConnectionType(
                            type_name = '', ), )
                    ],
                optimization_options = touroptimizer_py_client.models.optimization_options.OptimizationOptions(
                    properties = {
                        'key' : ''
                        }, ),
                core_build_options = touroptimizer_py_client.models.core_build_options.CoreBuildOptions(
                    build_core_properties = {
                        'key' : ''
                        }, ),
                solution = touroptimizer_py_client.models.solution.Solution(
                    optimization_status = touroptimizer_py_client.models.optimization_status.OptimizationStatus(
                        status_description = '', 
                        error = '', 
                        status = 'UNKNOWN', ), 
                    id = '626ba175a9d4fa6d6beec158', 
                    created_time_stamp = 56, 
                    creator = '11aa65b13c2a6d34f8727e82e403ce869e3bba1d35c45c595e8cc5ce5e74e57a', 
                    ident = 'JOpt-Run-603886271000', 
                    header = touroptimizer_py_client.models.solution_header.SolutionHeader(
                        num_routes = 10, 
                        num_scheduled_routes = 8, 
                        tot_elements = 516, 
                        unassigned_element_ids = [
                            ''
                            ], 
                        tot_cost = 95164.1314, 
                        tot_time = 'PT480M', 
                        tot_idle_time = 'PT30M', 
                        tot_prod_time = 'PT300M', 
                        tot_tran_time = 'PT200M', 
                        tot_termi_time = 'PT30M', 
                        tot_distance = '100.0 km', 
                        tot_termi_distance = '100.0 km', 
                        job_violations = [
                            touroptimizer_py_client.models.violation.Violation(
                                value = '507.98525', 
                                desc = 'Late time [min]: 507.98525', 
                                category = 'CONSTRAINTVIOLATION', 
                                attribute = 'TIMECONSTRAINT', 
                                sub_attribute = 'LATE', 
                                code = 5, )
                            ], ), 
                    routes = [
                        touroptimizer_py_client.models.route.Route(
                            id = 11, 
                            resource_id = 'Laura', 
                            route_trip = touroptimizer_py_client.models.route_trip.RouteTrip(
                                trips = [
                                    touroptimizer_py_client.models.resource_trip.ResourceTrip(
                                        line = touroptimizer_py_client.models.encoded_polyline.EncodedPolyline(
                                            encoded_polyline = '', 
                                            precision = 1.337, ), 
                                        from_element_id = '', 
                                        to_element_id = '', 
                                        raw_json = touroptimizer_py_client.models.raw_json.rawJson(), )
                                    ], ), 
                            start_time = '2020-03-06T07:00Z', 
                            start_element_id = 'Laura', 
                            start_position = touroptimizer_py_client.models.position.Position(
                                latitude = 48.384037, 
                                longitude = 10.005226, 
                                location_id = 'MyLocationId', 
                                geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                                    location_id = 'MyLocationId', 
                                    housenumber = '5', 
                                    streetname = 'Marlene-Dietrich-Strasse', 
                                    city = 'Neu-Ulm', 
                                    county = '', 
                                    state = '', 
                                    statecode = '', 
                                    country = 'Germany', 
                                    macrocountry = 'Berlin', 
                                    countrycode = 'DE', 
                                    postalcode = '89231', 
                                    layer = '', 
                                    source = '', 
                                    accuracy = '', 
                                    confidence = 1.0, 
                                    label = '', ), 
                                location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                                    layers = 'address', 
                                    size = 1, 
                                    radius = 20, 
                                    sources = 'all', ), ), 
                            end_element_id = 'Laura', 
                            end_position = touroptimizer_py_client.models.position.Position(
                                latitude = 48.384037, 
                                longitude = 10.005226, 
                                location_id = 'MyLocationId', ), 
                            optimizable_element_ids = [
                                ''
                                ], 
                            non_optimizable_element_ids = [
                                ''
                                ], 
                            optional_optimizable_element_ids = [
                                ''
                                ], 
                            pillar_element_ids = [
                                ''
                                ], 
                            element_details = [
                                touroptimizer_py_client.models.route_element_detail.RouteElementDetail(
                                    element_id = 'Customer-A', 
                                    start_time = '2020-03-06T08:00Z', 
                                    arrival_time = '2020-03-06T07:00Z', 
                                    departure_time = '2020-03-06T10:00Z', 
                                    transition_time = 'PT23M', 
                                    effective_position = , 
                                    idle_time = 'PT60M', 
                                    zone_id = 'UTC', 
                                    white_space_idle_time = 'PT26M', 
                                    duration_time = 'PT120M', 
                                    transition_distance = '100.0 km', 
                                    choosen_working_hours_index = 1, 
                                    early_deviation = 'PT30M', 
                                    late_deviation = 'PT-30M', 
                                    schedule_status = 'INTIME', 
                                    visitor_id = 'Laura', 
                                    load_change = [
                                        1.337
                                        ], 
                                    cur_capacity = [
                                        1.337
                                        ], 
                                    before_visit_node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                                        items = [
                                            touroptimizer_py_client.models.i_load.ILoad(
                                                priority = 56, 
                                                load_value = 1.337, 
                                                fuzzy_visit = True, 
                                                request = True, 
                                                id = '', 
                                                type_name = '', )
                                            ], 
                                        depot_id = '', 
                                        has_timed_loads = True, 
                                        has_flex_load = True, 
                                        type_name = '', ), 
                                    after_visit_node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                                        depot_id = '', 
                                        has_timed_loads = True, 
                                        has_flex_load = True, 
                                        type_name = '', ), 
                                    node_violations = [
                                        touroptimizer_py_client.models.violation.Violation(
                                            value = '507.98525', 
                                            desc = 'Late time [min]: 507.98525', 
                                            category = 'CONSTRAINTVIOLATION', 
                                            attribute = 'TIMECONSTRAINT', 
                                            sub_attribute = 'LATE', 
                                            code = 5, )
                                        ], 
                                    is_unlocated_idle_time = True, )
                                ], 
                            pillar_latest_effective_arrival_offset_map = {
                                'key' : 56
                                }, 
                            flags = [
                                'FINALIZED_PILLARFORCEARRANGER'
                                ], 
                            additional_route_start_offset = 56, 
                            is_inactive = False, 
                            is_locked_down = False, 
                            is_finalized = False, )
                        ], ),
                extension = touroptimizer_py_client.models.json_config.JSONConfig(
                    creator_setting = touroptimizer_py_client.models.creator_setting.CreatorSetting(
                        creator = '', ), 
                    text_solution = touroptimizer_py_client.models.text_solution.TextSolution(
                        text_solution = '', ), 
                    key_setting = touroptimizer_py_client.models.optimization_key_setting.OptimizationKeySetting(
                        json_license = '', ), 
                    persistence_setting = touroptimizer_py_client.models.optimization_persistence_setting.OptimizationPersistenceSetting(
                        mongo_settings = touroptimizer_py_client.models.mongo_optimization_persistence_setting.MongoOptimizationPersistenceSetting(
                            enable_persistence = True, 
                            secret = '', 
                            expiry = 'PT48H', 
                            optimization_persistence_stratgy_setting = touroptimizer_py_client.models.optimization_persistence_stratgy_setting.OptimizationPersistenceStratgySetting(
                                save_only_result = False, 
                                save_connections = False, ), 
                            stream_persistence_stratgy_setting = touroptimizer_py_client.models.stream_persistence_stratgy_setting.StreamPersistenceStratgySetting(
                                save_progress = True, 
                                cycle_progress = True, 
                                save_status = True, 
                                cycle_status = True, 
                                save_warning = True, 
                                save_error = True, ), ), ), 
                    plugin_settings = touroptimizer_py_client.models.plugin_settings.PluginSettings(
                        plugins = [
                            touroptimizer_py_client.models.plugin_setting.PluginSetting(
                                plugin_name = '', 
                                json_setting = '', 
                                is_active = True, )
                            ], ), 
                    time_out = 'PT2H', )
            )
        else:
            return RestOptimization(
                nodes = [
                    touroptimizer_py_client.models.node.Node(
                        id = 'MySecondNode', 
                        extra_info = 'My custom extra info', 
                        location_id = 'MyFirstNode', 
                        constraint_alias_id = 'MyNode', 
                        type = touroptimizer_py_client.models.node_type.NodeType(
                            type_name = '', ), 
                        opening_hours = [
                            touroptimizer_py_client.models.opening_hours.OpeningHours(
                                begin = '2020-03-06T06:00Z', 
                                end = '2020-03-06T19:00Z', 
                                zone_id = 'UTC', 
                                service_hours_offsets = [
                                    touroptimizer_py_client.models.long_long_pair.LongLongPair(
                                        left = 56, 
                                        right = 56, )
                                    ], 
                                is_preffered = False, 
                                is_solo_access_hours = True, )
                            ], 
                        visit_duration = 'PT60M', 
                        constraints = [
                            touroptimizer_py_client.models.constraint.Constraint(
                                type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                    type_name = '', ), 
                                is_hard = True, )
                            ], 
                        offered_node = touroptimizer_py_client.models.offered_node.OfferedNode(
                            individual_multiplier = 1.337, ), 
                        load_dimension = touroptimizer_py_client.models.load_dimension.LoadDimension(
                            unload_all_dimension = 56, 
                            total_load_dimension = 56, 
                            unload_all = True, ), 
                        load = [
                            1.337
                            ], 
                        qualifications = [
                            touroptimizer_py_client.models.qualification.Qualification(
                                type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                    type_name = '', ), )
                            ], 
                        lockdown_time = 56, 
                        fix_cost = 1.337, 
                        priority = 56, 
                        priority_first = 56, 
                        priority_last = 56, 
                        node_color = touroptimizer_py_client.models.node_color.NodeColor(
                            color_code = 56, 
                            color_id = '', 
                            count_value = 56, ), 
                        min_auto_filter_protected_executions = 56, 
                        node_depot = touroptimizer_py_client.models.i_node_depot.INodeDepot(
                            items = [
                                touroptimizer_py_client.models.i_load.ILoad(
                                    priority = 56, 
                                    load_value = 1.337, 
                                    fuzzy_visit = True, 
                                    request = True, 
                                    id = '', 
                                    type_name = '', )
                                ], 
                            depot_id = '', 
                            has_timed_loads = True, 
                            has_flex_load = True, 
                            type_name = '', ), 
                        route_dependent_visit_duration = True, 
                        allow_move_to_reduce_flex_time = True, 
                        min_visit_duration = 'PT10M', 
                        joint_visit_duration = 'PT60M', 
                        return_start_duration = '', 
                        is_optimizable = True, 
                        is_optional = True, 
                        is_unassigned = True, 
                        is_stay_node = True, 
                        is_work_node = True, 
                        is_wait_on_early_arrival = True, 
                        is_opening_hours_includes_duration = True, 
                        is_causing_idle_time_cost = True, 
                        is_wait_on_early_arrival_first_node = True, )
                    ],
                resources = [
                    touroptimizer_py_client.models.resource.Resource(
                        id = 'MyResouce', 
                        extra_info = 'My custom extra info', 
                        location_id = 'MySecondResource', 
                        constraint_alias_id = 'Jane', 
                        type = touroptimizer_py_client.models.resource_type.ResourceType(
                            type_name = '', ), 
                        position = touroptimizer_py_client.models.position.Position(
                            latitude = 48.384037, 
                            longitude = 10.005226, 
                            location_id = 'MyLocationId', 
                            geo_address = touroptimizer_py_client.models.geo_address.GeoAddress(
                                location_id = 'MyLocationId', 
                                housenumber = '5', 
                                streetname = 'Marlene-Dietrich-Strasse', 
                                city = 'Neu-Ulm', 
                                county = '', 
                                state = '', 
                                statecode = '', 
                                country = 'Germany', 
                                macrocountry = 'Berlin', 
                                countrycode = 'DE', 
                                postalcode = '89231', 
                                layer = '', 
                                source = '', 
                                accuracy = '', 
                                confidence = 1.0, 
                                label = '', ), 
                            location_parameters = touroptimizer_py_client.models.location_parameters.LocationParameters(
                                layers = 'address', 
                                size = 1, 
                                radius = 20, 
                                sources = 'all', ), ), 
                        working_hours = [
                            touroptimizer_py_client.models.working_hours.WorkingHours(
                                begin = '2020-03-06T07:00Z', 
                                end = '2020-03-06T17:00Z', 
                                zone_id = 'UTC', 
                                max_time = 'PT480M', 
                                max_distance = '800.0 km', 
                                stay_out_cycle_definition = touroptimizer_py_client.models.stay_out_cycle_definition.StayOutCycleDefinition(
                                    cycle_lenght = 'PT7D', 
                                    cycle_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                                start_reduction_time_definition = touroptimizer_py_client.models.start_reduction_time_definition.StartReductionTimeDefinition(
                                    max_route_start_reduction_time = 'PT30M', 
                                    is_reduction_time_only_used_for_driving = True, ), 
                                start_reduction_time_pillar_definition = touroptimizer_py_client.models.start_reduction_time_pillar_definition.StartReductionTimePillarDefinition(
                                    max_route_start_reduction_time_pillar = 'PT30M', 
                                    is_reduction_time_only_used_for_driving_pillar = True, ), 
                                start_reduction_time_include_definition = touroptimizer_py_client.models.start_reduction_time_include_definition.StartReductionTimeIncludeDefinition(
                                    is_reduction_time_included_in_working_time = True, ), 
                                local_flex_time = 'PT30M', 
                                local_post_flex_time = 'PT30M', 
                                local_post_flex_time_only_on_overtime = True, 
                                max_local_pillar_after_hours_time = 'PT30M', 
                                node_color_capacities = [
                                    touroptimizer_py_client.models.node_color_capacity.NodeColorCapacity(
                                        node_color = touroptimizer_py_client.models.node_color.NodeColor(
                                            color_code = 56, 
                                            color_id = '', 
                                            count_value = 56, ), 
                                        max_usage = 1.337, )
                                    ], 
                                working_hours_constraints = [
                                    touroptimizer_py_client.models.constraint.Constraint(
                                        type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                            type_name = '', ), 
                                        is_hard = True, )
                                    ], 
                                multi_working_hours_constraints = [
                                    touroptimizer_py_client.models.constraint.Constraint(
                                        type = touroptimizer_py_client.models.constraint_type.ConstraintType(
                                            type_name = '', ), 
                                        is_hard = True, )
                                    ], 
                                qualifications = [
                                    touroptimizer_py_client.models.qualification.Qualification(
                                        type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                            type_name = '', ), )
                                    ], 
                                route_start_time_hook = 'PT30M', 
                                hook_element_connections = [
                                    touroptimizer_py_client.models.reduced_node_edge_connector_item.ReducedNodeEdgeConnectorItem(
                                        distance = '100.0 km', 
                                        time = 'PT30M', 
                                        from_element_id = 'MyStartElementId', 
                                        to_element_id = 'MyToElementId', )
                                    ], 
                                is_available_for_stay = True, 
                                is_closed_route = True, )
                            ], 
                        max_time = 'PT8H', 
                        max_distance = '100.0 km', 
                        destination_position = touroptimizer_py_client.models.position.Position(
                            latitude = 48.384037, 
                            longitude = 10.005226, 
                            location_id = 'MyLocationId', ), 
                        stay_out_definition = touroptimizer_py_client.models.stay_out_definition.StayOutDefinition(
                            max_total_stays_out = 56, 
                            max_stays_out_in_row = 56, 
                            min_recovery = 'PT1D', ), 
                        stay_out_cycle_definition = touroptimizer_py_client.models.stay_out_cycle_definition.StayOutCycleDefinition(
                            cycle_lenght = 'PT7D', 
                            cycle_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        stay_out_policy_time = 'PT1H', 
                        stay_out_policy_distance = '100.0 km', 
                        capacity = [
                            1.337
                            ], 
                        initial_load = [
                            1.337
                            ], 
                        min_degrated_capacity = [
                            1.337
                            ], 
                        capacity_deg_per_stop = [
                            1.337
                            ], 
                        start_reduction_time_definition = touroptimizer_py_client.models.start_reduction_time_definition.StartReductionTimeDefinition(
                            max_route_start_reduction_time = 'PT30M', 
                            is_reduction_time_only_used_for_driving = True, ), 
                        start_reduction_time_pillar_definition = touroptimizer_py_client.models.start_reduction_time_pillar_definition.StartReductionTimePillarDefinition(
                            max_route_start_reduction_time_pillar = 'PT30M', 
                            is_reduction_time_only_used_for_driving_pillar = True, ), 
                        start_reduction_time_include_definition = touroptimizer_py_client.models.start_reduction_time_include_definition.StartReductionTimeIncludeDefinition(
                            is_reduction_time_included_in_working_time = True, ), 
                        flex_time = 'PT1H', 
                        post_flex_time = 'PT1H', 
                        post_flex_time_only_on_overtime = True, 
                        max_pillar_after_hours_time = 'PT1H', 
                        max_drive_time_first_node = 'PT1H', 
                        max_drive_distance_first_node = '100.0 km', 
                        max_drive_time_last_node = 'PT1H', 
                        max_drive_distance_last_node = '100.0 km', 
                        kilometer_cost = 1.337, 
                        hour_cost = 1.337, 
                        production_hour_cost = 1.337, 
                        fix_cost = 1.337, 
                        pre_work_driving_time = 'PT1H', 
                        skill_efficiency_factor = 1.337, 
                        acceptable_overtime = 'PT1H', 
                        strict_overtime = 'PT2H', 
                        acceptable_overdistance = '100.0 km', 
                        strict_overdistance = '100.0 km', 
                        average_speed = 1.337, 
                        qualifications = [
                            touroptimizer_py_client.models.qualification.Qualification(
                                type = touroptimizer_py_client.models.qualification_type.QualificationType(
                                    type_name = '', ), )
                            ], 
                        constraints = [
                            
                            ], 
                        connection_time_efficiency_factor = 1.5, 
                        co2emission_factor = 0.377, 
                        resource_depot = touroptimizer_py_client.models.i_resource_depot.IResourceDepot(
                            items = [
                                touroptimizer_py_client.models.i_load_capacity.ILoadCapacity(
                                    load_pickup_time = 56, 
                                    current_load = 1.337, 
                                    maximal_individual_load_capacity = 1.337, 
                                    id = '', 
                                    type_name = '', )
                                ], 
                            depot_id = '', 
                            maximal_total_capacity = 1.337, 
                            capacity_unit_map = {
                                'key' : 1.337
                                }, 
                            type_name = '', ), 
                        overall_visit_duration_efficiency = 1.5, 
                        is_reduction_time_included_in_total_working_time = True, 
                        is_reduction_time_only_used_for_driving = True, )
                    ],
        )
        """

    def testRestOptimization(self):
        """Test RestOptimization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
