# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-rc3-j17-SNAPSHOT)

    The version of the OpenAPI document: unknown
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from touroptimizer_py_client.models.core_build_options import CoreBuildOptions
from touroptimizer_py_client.models.element_connection import ElementConnection
from touroptimizer_py_client.models.json_config import JSONConfig
from touroptimizer_py_client.models.node import Node
from touroptimizer_py_client.models.node_relation import NodeRelation
from touroptimizer_py_client.models.optimization_options import OptimizationOptions
from touroptimizer_py_client.models.optimization_status import OptimizationStatus
from touroptimizer_py_client.models.resource import Resource
from touroptimizer_py_client.models.solution import Solution
from typing import Optional, Set
from typing_extensions import Self

class RestOptimization(BaseModel):
    """
    RestOptimization
    """ # noqa: E501
    optimization_status: Optional[OptimizationStatus] = Field(default=None, alias="optimizationStatus")
    id: Optional[StrictStr] = Field(default=None, description="An id created by the system that can be used for unique identification")
    created_time_stamp: Optional[StrictInt] = Field(default=None, description="A timestamp when snapshot was created that will automatically filled out, if neccessary", alias="createdTimeStamp")
    creator: Optional[StrictStr] = Field(default=None, description="An id related to the creator that is filled out autmatically")
    ident: Optional[StrictStr] = Field(default=None, description="An optional title/ident for the run. If not provided, a generated ident will be used")
    nodes: List[Node] = Field(description="The list of nodes")
    resources: List[Resource] = Field(description="The list of resoruces")
    node_relations: Optional[List[NodeRelation]] = Field(default=None, description="The list of relations", alias="nodeRelations")
    element_connections: Optional[List[ElementConnection]] = Field(default=None, description="The list of connections", alias="elementConnections")
    optimization_options: Optional[OptimizationOptions] = Field(default=None, alias="optimizationOptions")
    core_build_options: Optional[CoreBuildOptions] = Field(default=None, alias="coreBuildOptions")
    solution: Optional[Solution] = None
    extension: Optional[JSONConfig] = None
    __properties: ClassVar[List[str]] = ["optimizationStatus", "id", "createdTimeStamp", "creator", "ident", "nodes", "resources", "nodeRelations", "elementConnections", "optimizationOptions", "coreBuildOptions", "solution", "extension"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RestOptimization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of optimization_status
        if self.optimization_status:
            _dict['optimizationStatus'] = self.optimization_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in node_relations (list)
        _items = []
        if self.node_relations:
            for _item_node_relations in self.node_relations:
                if _item_node_relations:
                    _items.append(_item_node_relations.to_dict())
            _dict['nodeRelations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in element_connections (list)
        _items = []
        if self.element_connections:
            for _item_element_connections in self.element_connections:
                if _item_element_connections:
                    _items.append(_item_element_connections.to_dict())
            _dict['elementConnections'] = _items
        # override the default output from pydantic by calling `to_dict()` of optimization_options
        if self.optimization_options:
            _dict['optimizationOptions'] = self.optimization_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of core_build_options
        if self.core_build_options:
            _dict['coreBuildOptions'] = self.core_build_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of solution
        if self.solution:
            _dict['solution'] = self.solution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extension
        if self.extension:
            _dict['extension'] = self.extension.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RestOptimization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "optimizationStatus": OptimizationStatus.from_dict(obj["optimizationStatus"]) if obj.get("optimizationStatus") is not None else None,
            "id": obj.get("id"),
            "createdTimeStamp": obj.get("createdTimeStamp"),
            "creator": obj.get("creator"),
            "ident": obj.get("ident"),
            "nodes": [Node.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "resources": [Resource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "nodeRelations": [NodeRelation.from_dict(_item) for _item in obj["nodeRelations"]] if obj.get("nodeRelations") is not None else None,
            "elementConnections": [ElementConnection.from_dict(_item) for _item in obj["elementConnections"]] if obj.get("elementConnections") is not None else None,
            "optimizationOptions": OptimizationOptions.from_dict(obj["optimizationOptions"]) if obj.get("optimizationOptions") is not None else None,
            "coreBuildOptions": CoreBuildOptions.from_dict(obj["coreBuildOptions"]) if obj.get("coreBuildOptions") is not None else None,
            "solution": Solution.from_dict(obj["solution"]) if obj.get("solution") is not None else None,
            "extension": JSONConfig.from_dict(obj["extension"]) if obj.get("extension") is not None else None
        })
        return _obj


