# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (7.5.1-rc3-j17-SNAPSHOT)

    The version of the OpenAPI document: unknown
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from touroptimizer_py_client.models.position import Position
from touroptimizer_py_client.models.route_element_detail import RouteElementDetail
from touroptimizer_py_client.models.route_header import RouteHeader
from touroptimizer_py_client.models.route_trip import RouteTrip
from typing import Optional, Set
from typing_extensions import Self

class Route(BaseModel):
    """
    The routes of the solution.
    """ # noqa: E501
    header: Optional[RouteHeader] = None
    id: StrictInt = Field(description="The id is an optimizer provided number identifiying a route.")
    resource_id: StrictStr = Field(description="The resourceId of the Visitor owning this route.", alias="resourceId")
    route_trip: Optional[RouteTrip] = Field(default=None, alias="routeTrip")
    start_time: datetime = Field(description="The startTime of the route. This is usually the start of the workingHours of the Resource. However, when using flextime/reduction-time the starttime can be different from the working hours start.", alias="startTime")
    start_element_id: StrictStr = Field(description="The startElementId, is the element from where the route starts. By default, it is the Resource itself.", alias="startElementId")
    start_position: Optional[Position] = Field(default=None, alias="startPosition")
    end_element_id: StrictStr = Field(description="The endElementId, is the element where the route stops. By default, it is the Resource itself.", alias="endElementId")
    end_position: Optional[Position] = Field(default=None, alias="endPosition")
    optimizable_element_ids: List[StrictStr] = Field(description="The optimizableElementIds. The list of optimizable elements that are part of the route.", alias="optimizableElementIds")
    non_optimizable_element_ids: List[StrictStr] = Field(description="The nonOptimizableElementIds. The list of non-optimizable elements that are part of the route.", alias="nonOptimizableElementIds")
    optional_optimizable_element_ids: List[StrictStr] = Field(description="The optionalOptimizableElementIds. The list of optional elements that are part of the route.", alias="optionalOptimizableElementIds")
    pillar_element_ids: List[StrictStr] = Field(description="The pillarElementIds. The list of pillar elements that are part of the route.", alias="pillarElementIds")
    element_details: List[RouteElementDetail] = Field(description="The elementDetails. The list of details describing the route schedule.", alias="elementDetails")
    pillar_latest_effective_arrival_offset_map: Optional[Dict[str, StrictInt]] = Field(default=None, description="The pillarLatestEffectiveArrivalOffsetMap. A map of additional time offsets for pillar elements. Each pillar has a latest possible arrival. As a route can consist of multiple pillars, the latest arrival at a certain pillar is also a function of  subsequent pillars. This latest arrival may shifted to a later time spot to allow shifitig a pillar around a normal node, even the normal node would fit before the pillar.", alias="pillarLatestEffectiveArrivalOffsetMap")
    flags: Optional[List[StrictStr]] = Field(default=None, description="The flags. A list of flags indicating statii like which source finalized a route.")
    additional_route_start_offset: Optional[StrictInt] = Field(default=None, description="The additionalRouteStartOffset", alias="additionalRouteStartOffset")
    is_locked_down: Optional[StrictBool] = Field(default=None, description="The isLockedDown. Describes if a route was undergoing lockdown.", alias="isLockedDown")
    is_inactive: Optional[StrictBool] = Field(default=None, description="The isInactive boolean describes if a route is deactivated.", alias="isInactive")
    is_finalized: Optional[StrictBool] = Field(default=None, description="The isFinalized. Describes if a route was undergoing finalization.", alias="isFinalized")
    __properties: ClassVar[List[str]] = ["header", "id", "resourceId", "routeTrip", "startTime", "startElementId", "startPosition", "endElementId", "endPosition", "optimizableElementIds", "nonOptimizableElementIds", "optionalOptimizableElementIds", "pillarElementIds", "elementDetails", "pillarLatestEffectiveArrivalOffsetMap", "flags", "additionalRouteStartOffset", "isLockedDown", "isInactive", "isFinalized"]

    @field_validator('flags')
    def flags_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FINALIZED_PILLARFORCEARRANGER', 'INACTIVE_PILLARFORCEARRANGER', 'FINALIZED_ROUTE_FINALIZER', 'INACTIVE_ROUTE_FINALIZER']):
                raise ValueError("each list item must be one of ('FINALIZED_PILLARFORCEARRANGER', 'INACTIVE_PILLARFORCEARRANGER', 'FINALIZED_ROUTE_FINALIZER', 'INACTIVE_ROUTE_FINALIZER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Route from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of header
        if self.header:
            _dict['header'] = self.header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of route_trip
        if self.route_trip:
            _dict['routeTrip'] = self.route_trip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_position
        if self.start_position:
            _dict['startPosition'] = self.start_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_position
        if self.end_position:
            _dict['endPosition'] = self.end_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in element_details (list)
        _items = []
        if self.element_details:
            for _item_element_details in self.element_details:
                if _item_element_details:
                    _items.append(_item_element_details.to_dict())
            _dict['elementDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Route from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "header": RouteHeader.from_dict(obj["header"]) if obj.get("header") is not None else None,
            "id": obj.get("id"),
            "resourceId": obj.get("resourceId"),
            "routeTrip": RouteTrip.from_dict(obj["routeTrip"]) if obj.get("routeTrip") is not None else None,
            "startTime": obj.get("startTime"),
            "startElementId": obj.get("startElementId"),
            "startPosition": Position.from_dict(obj["startPosition"]) if obj.get("startPosition") is not None else None,
            "endElementId": obj.get("endElementId"),
            "endPosition": Position.from_dict(obj["endPosition"]) if obj.get("endPosition") is not None else None,
            "optimizableElementIds": obj.get("optimizableElementIds"),
            "nonOptimizableElementIds": obj.get("nonOptimizableElementIds"),
            "optionalOptimizableElementIds": obj.get("optionalOptimizableElementIds"),
            "pillarElementIds": obj.get("pillarElementIds"),
            "elementDetails": [RouteElementDetail.from_dict(_item) for _item in obj["elementDetails"]] if obj.get("elementDetails") is not None else None,
            "pillarLatestEffectiveArrivalOffsetMap": obj.get("pillarLatestEffectiveArrivalOffsetMap"),
            "flags": obj.get("flags"),
            "additionalRouteStartOffset": obj.get("additionalRouteStartOffset"),
            "isLockedDown": obj.get("isLockedDown"),
            "isInactive": obj.get("isInactive"),
            "isFinalized": obj.get("isFinalized")
        })
        return _obj


