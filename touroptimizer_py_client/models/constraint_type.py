# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)

    The version of the OpenAPI document: 1.2.6-SNAPSHOT
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class ConstraintType(BaseModel):
    """
    The type
    """ # noqa: E501
    type_name: StrictStr = Field(alias="typeName")
    __properties: ClassVar[List[str]] = ["typeName"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AbsoluteNodeColorMultiRouteConstraint': 'AbsoluteNodeColorMultiRouteConstraint','BindingResource': 'BindingResourceConstraint','ConnectedConstraint': 'ConnectedConstraint','ExcludingResource': 'ExcludingResourceConstraint','NodeColorMultiRouteConstraint': 'NodeColorMultiRouteConstraint','ResourceLocationConstraint': 'ResourceLocationConstraint','Type': 'TypeConstraint','TypeWithExpertise': 'TypeWithExpertiseConstraint','UKPostCodeConstraint': 'UKPostCodeConstraint','ZoneNumberConstraint': 'ZoneNumberConstraint'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of ConstraintType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of ConstraintType from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("ConstraintType failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from touroptimizer_py_client.models.absolute_node_color_multi_route_constraint import AbsoluteNodeColorMultiRouteConstraint
from touroptimizer_py_client.models.binding_resource_constraint import BindingResourceConstraint
from touroptimizer_py_client.models.connected_constraint import ConnectedConstraint
from touroptimizer_py_client.models.excluding_resource_constraint import ExcludingResourceConstraint
from touroptimizer_py_client.models.node_color_multi_route_constraint import NodeColorMultiRouteConstraint
from touroptimizer_py_client.models.resource_location_constraint import ResourceLocationConstraint
from touroptimizer_py_client.models.type_constraint import TypeConstraint
from touroptimizer_py_client.models.type_with_expertise_constraint import TypeWithExpertiseConstraint
from touroptimizer_py_client.models.uk_post_code_constraint import UKPostCodeConstraint
from touroptimizer_py_client.models.zone_number_constraint import ZoneNumberConstraint
# TODO: Rewrite to not use raise_errors
ConstraintType.model_rebuild(raise_errors=False)

