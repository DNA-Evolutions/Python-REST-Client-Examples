# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)

    The version of the OpenAPI document: 1.2.6-SNAPSHOT
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from touroptimizer_py_client.models.connection_by_time import ConnectionByTime
from touroptimizer_py_client.models.element_connection_type import ElementConnectionType
from touroptimizer_py_client.models.position import Position
from typing import Optional, Set
from typing_extensions import Self

class EdgeElementConnection(ElementConnectionType):
    """
    EdgeElementConnection
    """ # noqa: E501
    distance: StrictStr = Field(description="The distance of the connection.")
    time: Optional[StrictStr] = Field(default=None, description="The time needed to pass the connection.")
    from_position: Optional[Position] = Field(default=None, alias="fromPosition")
    to_position: Optional[Position] = Field(default=None, alias="toPosition")
    connection_by_time: Optional[ConnectionByTime] = Field(default=None, alias="connectionByTime")
    type_name: StrictStr = Field(description="The typeName of the object", alias="typeName")
    __properties: ClassVar[List[str]] = ["typeName", "distance", "time", "fromPosition", "toPosition", "connectionByTime"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EdgeElementConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of from_position
        if self.from_position:
            _dict['fromPosition'] = self.from_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to_position
        if self.to_position:
            _dict['toPosition'] = self.to_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connection_by_time
        if self.connection_by_time:
            _dict['connectionByTime'] = self.connection_by_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EdgeElementConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "typeName": obj.get("typeName") if obj.get("typeName") is not None else 'Edge',
            "distance": obj.get("distance"),
            "time": obj.get("time"),
            "fromPosition": Position.from_dict(obj["fromPosition"]) if obj.get("fromPosition") is not None else None,
            "toPosition": Position.from_dict(obj["toPosition"]) if obj.get("toPosition") is not None else None,
            "connectionByTime": ConnectionByTime.from_dict(obj["connectionByTime"]) if obj.get("connectionByTime") is not None else None
        })
        return _obj


