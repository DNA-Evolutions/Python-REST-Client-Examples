# coding: utf-8

"""
    DNA Evolutions - JOpt.TourOptimizer

    This is DNA's JOpt.TourOptimizer service. A RESTful Spring Boot application using springdoc-openapi and OpenAPI 3. JOpt.TourOpptimizer is a service that delivers route optimization and automatic scheduling features to be easily integrated into any third-party application. JOpt.TourOpptimizer encapsulates all necessary optimization functionality and provides a comprehensive REST API that offers a domain-specific optimization interface for the transportation industry. The service is stateless and does not come with graphical user interfaces, map depiction or any databases. These extensions and adjustments are supposed to be introduced by the consumer of the service while integrating it into his/her own application. The service will allow for many suitable adjustments and user-specific settings to adjust the behaviour and optimization goals (e.g. minimizing distance, maximizing resource utilization, etc.) through a comprehensive set of functions. This will enable you to gain control of the complete optimization processes.This service is based on JOpt (null)

    The version of the OpenAPI document: 1.2.6-SNAPSHOT
    Contact: info@dna-evolutions.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from touroptimizer_py_client.models.optimization_persistence_stratgy_setting import OptimizationPersistenceStratgySetting
from touroptimizer_py_client.models.stream_persistence_stratgy_setting import StreamPersistenceStratgySetting
from typing import Optional, Set
from typing_extensions import Self

class MongoOptimizationPersistenceSetting(BaseModel):
    """
    The mongoSettings
    """ # noqa: E501
    enable_persistence: StrictBool = Field(description="The enablePersistence", alias="enablePersistence")
    secret: StrictStr = Field(description="The secret that encrypts the result. If empty, no encryption is assigned. Important: Metadata and stream information like progress is always saved as decrypted clear text. Attention: The secret is not saved by DNA evolutions. If you loose the secret, the file CAN NOT be restored.")
    expiry: Optional[StrictStr] = Field(default=None, description="The document will be automatically deleted after this duration. The default value is 48 hours.")
    optimization_persistence_stratgy_setting: OptimizationPersistenceStratgySetting = Field(alias="optimizationPersistenceStratgySetting")
    stream_persistence_stratgy_setting: StreamPersistenceStratgySetting = Field(alias="streamPersistenceStratgySetting")
    __properties: ClassVar[List[str]] = ["enablePersistence", "secret", "expiry", "optimizationPersistenceStratgySetting", "streamPersistenceStratgySetting"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MongoOptimizationPersistenceSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of optimization_persistence_stratgy_setting
        if self.optimization_persistence_stratgy_setting:
            _dict['optimizationPersistenceStratgySetting'] = self.optimization_persistence_stratgy_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stream_persistence_stratgy_setting
        if self.stream_persistence_stratgy_setting:
            _dict['streamPersistenceStratgySetting'] = self.stream_persistence_stratgy_setting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MongoOptimizationPersistenceSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enablePersistence": obj.get("enablePersistence"),
            "secret": obj.get("secret"),
            "expiry": obj.get("expiry"),
            "optimizationPersistenceStratgySetting": OptimizationPersistenceStratgySetting.from_dict(obj["optimizationPersistenceStratgySetting"]) if obj.get("optimizationPersistenceStratgySetting") is not None else None,
            "streamPersistenceStratgySetting": StreamPersistenceStratgySetting.from_dict(obj["streamPersistenceStratgySetting"]) if obj.get("streamPersistenceStratgySetting") is not None else None
        })
        return _obj


